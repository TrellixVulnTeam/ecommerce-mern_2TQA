{"ast":null,"code":"import axios from \"axios\";\nimport { START_LOADING, STOP_LOADING } from \"../constants/loadingConstants\";\nimport { SHOW_ERROR_MESSAGE, SHOW_SUCCESS_MESSAGE } from \"../constants/messageConstants\";\nimport { CREATE_PRODUCTS, GET_PRODUCTS } from \"../constants/productConstant\";\nexport const createProduct = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const response = await axios.post(\"/api/product\", formData, config);\n    dispatch({\n      type: STOP_LOADING\n    });\n    dispatch({\n      type: SHOW_SUCCESS_MESSAGE,\n      payload: response.data.successMessage\n    });\n    dispatch({\n      type: CREATE_PRODUCTS,\n      payload: response.data.product\n    });\n    return response;\n  } catch (err) {\n    console.log(\"get product api error: \", err);\n    dispatch({\n      type: STOP_LOADING\n    });\n    dispatch({\n      type: SHOW_ERROR_MESSAGE,\n      payload: err.response.data.errorMessage\n    });\n  }\n};\nexport const getProducts = () => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const response = await axios.get(\"/api/product\", config);\n    dispatch({\n      type: STOP_LOADING\n    });\n    dispatch({\n      type: GET_PRODUCTS,\n      payload: response.data.products\n    });\n  } catch (err) {\n    console.log(\"get products api error: \", err);\n    dispatch({\n      type: STOP_LOADING\n    });\n    dispatch({\n      type: SHOW_ERROR_MESSAGE,\n      payload: err.response.data.errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/home/shivaworkstation/Documents/MERN STACK/ecommerce/client/src/redux/actions/productActions.js"],"names":["axios","START_LOADING","STOP_LOADING","SHOW_ERROR_MESSAGE","SHOW_SUCCESS_MESSAGE","CREATE_PRODUCTS","GET_PRODUCTS","createProduct","formData","dispatch","config","headers","type","response","post","payload","data","successMessage","product","err","console","log","errorMessage","getProducts","get","products"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,+BAA5C;AACA,SACEC,kBADF,EAEEC,oBAFF,QAGO,+BAHP;AAIA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,8BAA9C;AAEA,OAAO,MAAMC,aAAa,GAAIC,QAAD,IAAc,MAAOC,QAAP,IAAoB;AAC7D,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAKA,MAAI;AACFF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACA,UAAMY,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,cAAX,EAA2BN,QAA3B,EAAqCE,MAArC,CAAvB;AACAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AACAO,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,oBADC;AAEPW,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFhB,KAAD,CAAR;AAIAR,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,eADC;AAEPU,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcE;AAFhB,KAAD,CAAR;AAIA,WAAOL,QAAP;AACD,GAbD,CAaE,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,GAAvC;AACAV,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AACAO,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,kBADC;AAEPY,MAAAA,OAAO,EAAEI,GAAG,CAACN,QAAJ,CAAaG,IAAb,CAAkBM;AAFpB,KAAD,CAAR;AAID;AACF,CA3BM;AA6BP,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOd,QAAP,IAAoB;AACnD,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAKA,MAAI;AACFF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACA,UAAMY,QAAQ,GAAG,MAAMb,KAAK,CAACwB,GAAN,CAAU,cAAV,EAA0Bd,MAA1B,CAAvB;AACAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AACAO,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN,YAAR;AAAsBS,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcS;AAA7C,KAAD,CAAR;AACD,GALD,CAKE,OAAON,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,GAAxC;AACAV,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AACAO,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,kBADC;AAEPY,MAAAA,OAAO,EAAEI,GAAG,CAACN,QAAJ,CAAaG,IAAb,CAAkBM;AAFpB,KAAD,CAAR;AAID;AACF,CAnBM","sourcesContent":["import axios from \"axios\";\nimport { START_LOADING, STOP_LOADING } from \"../constants/loadingConstants\";\nimport {\n  SHOW_ERROR_MESSAGE,\n  SHOW_SUCCESS_MESSAGE,\n} from \"../constants/messageConstants\";\nimport { CREATE_PRODUCTS, GET_PRODUCTS } from \"../constants/productConstant\";\n\nexport const createProduct = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  try {\n    dispatch({ type: START_LOADING });\n    const response = await axios.post(\"/api/product\", formData, config);\n    dispatch({ type: STOP_LOADING });\n    dispatch({\n      type: SHOW_SUCCESS_MESSAGE,\n      payload: response.data.successMessage,\n    });\n    dispatch({\n      type: CREATE_PRODUCTS,\n      payload: response.data.product,\n    });\n    return response;\n  } catch (err) {\n    console.log(\"get product api error: \", err);\n    dispatch({ type: STOP_LOADING });\n    dispatch({\n      type: SHOW_ERROR_MESSAGE,\n      payload: err.response.data.errorMessage,\n    });\n  }\n};\n\nexport const getProducts = () => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  try {\n    dispatch({ type: START_LOADING });\n    const response = await axios.get(\"/api/product\", config);\n    dispatch({ type: STOP_LOADING });\n    dispatch({ type: GET_PRODUCTS, payload: response.data.products });\n  } catch (err) {\n    console.log(\"get products api error: \", err);\n    dispatch({ type: STOP_LOADING });\n    dispatch({\n      type: SHOW_ERROR_MESSAGE,\n      payload: err.response.data.errorMessage,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}